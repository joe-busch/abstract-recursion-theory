"""Script to explore the conjecture that the Euclidean algorithm is optimal for
gcd computation among all algorithms which call the remainder function as their
only primitive.

Outputs triples (a, b, m) for consecutive values of the natural number m. Each
such triple is lexicographically least such that gcd(a, b) belongs to the
subalgebra generated by a and b from the remainder function in m steps but not
m-1.

"""

import math

max_input = 12500


def find_least_m(a, b, gcd):
    """Returns the least m such that gcd(a, b) belongs to the mth generated
subalgebra.

    """

    G = []
    G.append({0, 1, a, b})

    for m in range(max_input):
        if gcd in G[m]:
            return m
        else:
            G.append(G[m] | {x % y for x in G[m] for y in G[m] if y != 0})


greatest_cx = 0

for a in range(max_input):
    for b in range(2, a):
        gcd = math.gcd(a, b)
        m = find_least_m(a, b, gcd)
        if m > greatest_cx:
            greatest_cx = m
            print((a, b, m))
